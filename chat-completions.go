package gopenai

import (
	"encoding/json"
	"fmt"
	"net/http"
)

const chatCompletionsAPIEndpoint = "/chat/completions"

// LogitBias is a type alias for a map with string keys and interface{} values, used to specify logit bias in the completion request.
type LogitBias map[string]interface{}

// ChatCompletionParams represents the parameters for a chat
// completion request, including the model to use, the input
// messages, and various completion settings.
type ChatCompletionParams struct {
	Model            string                  `json:"model"`
	Messages         []ChatCompletionMessage `json:"messages"`
	Temperature      float64                 `json:"temperature,omitempty"`
	TopP             float64                 `json:"top_p,omitempty"`
	N                int                     `json:"n,omitempty"`
	Stop             string                  `json:"stop,omitempty"`
	PresencePenalty  float64                 `json:"presence_penalty,omitempty"`
	FrequencyPenalty float64                 `json:"frequency_penalty,omitempty"`
	LogitBias        LogitBias               `json:"logit_bias,omitempty"`
	User             string                  `json:"user,omitempty"`
}

// ChatCompletionMessageRole is an enum type representing the role
// of a message in a chat conversation (system, user, or assistant).
type ChatCompletionMessageRole string

// ChatCompletionMessageRole enum values
const (
	ChatCompletionMessageRoleSystem    ChatCompletionMessageRole = "system"
	ChatCompletionMessageRoleUser      ChatCompletionMessageRole = "user"
	ChatCompletionMessageRoleAssistant ChatCompletionMessageRole = "assistant"
)

// ChatCompletionMessage represents a message in a chat conversation
type ChatCompletionMessage struct {
	Role    ChatCompletionMessageRole `json:"role"`
	Content string                    `json:"content"`
}

// ChatCompletion represents a chat completion of a prompt generated by the API.
type ChatCompletion struct {
	ID      string                 `json:"id"`
	Object  string                 `json:"object"`
	Created int                    `json:"created"`
	Choices []ChatCompletionChoice `json:"choices"`
	Usage   TokenUsage             `json:"usage"`
}

// ChatCompletionChoice represents a single completion for a given prompt.
type ChatCompletionChoice struct {
	Index        int                   `json:"index"`
	Message      ChatCompletionMessage `json:"message"`
	FinishReason string                `json:"finish_reason"`
}

// ChatCompletionsAPI is an interface for creating completions.
type ChatCompletionsAPI interface {
	// Create generates a new completion based on the given
	// ChatCompletionParams and returns it as a ChatCompletion object.
	Create(ChatCompletionParams) (ChatCompletion, error)
}

type chatCompletionsAPI struct {
	c client
}

func (api chatCompletionsAPI) Create(params ChatCompletionParams) (ChatCompletion, error) {
	url := fmt.Sprintf("%s%s", baseURL, chatCompletionsAPIEndpoint)
	r, err := api.c.getJSONRequestResponse(url, http.MethodPost, params)
	if err != nil {
		return ChatCompletion{}, err
	}

	var response ChatCompletion
	if err := json.Unmarshal(r, &response); err != nil {
		return ChatCompletion{}, err
	}

	return response, nil
}
