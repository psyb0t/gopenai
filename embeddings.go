package gopenai

import (
	"encoding/json"
	"fmt"
	"net/http"
)

const embeddingsAPIEndpoint = "/embeddings"

// Embedding represents an embedding generated by OpenAI's API
type Embedding struct {
	// Embedding is the list of numbers that represent the embedding
	Embedding []float64 `json:"embedding"`
	// Model is the name of the model used to generate the embedding
	Model string `json:"model"`
	// Usage is the token usage metadata for the embedding
	Usage TokenUsage `json:"usage"`
}

// EmbeddingParams represents the parameters for generating an embedding
type EmbeddingParams struct {
	// Model is the name of the model to use for generating the embedding
	Model string `json:"model"`
	// Input is the text to generate an embedding for
	Input string `json:"input"`
	// User is an optional parameter for providing user metadata with the request
	User string `json:"user,omitempty"`
}

// EmbeddingsAPI represents an interface for generating embeddings
type EmbeddingsAPI interface {
	// Create generates an embedding for the given parameters
	Create(EmbeddingParams) (Embedding, error)
}

type embeddingsAPI struct {
	c client
}

func (api embeddingsAPI) Create(params EmbeddingParams) (Embedding, error) {
	url := fmt.Sprintf("%s%s", baseURL, embeddingsAPIEndpoint)
	r, err := api.c.getJSONRequestResponse(url, http.MethodPost, params)
	if err != nil {
		return Embedding{}, err
	}

	var response struct {
		Model string     `json:"model"`
		Usage TokenUsage `json:"usage"`
		Data  []struct {
			Embedding []float64 `json:"embedding"`
		}
	}

	if err := json.Unmarshal(r, &response); err != nil {
		return Embedding{}, err
	}

	embedding := Embedding{
		Embedding: response.Data[0].Embedding,
		Model:     response.Model,
		Usage:     response.Usage,
	}

	return embedding, nil
}
